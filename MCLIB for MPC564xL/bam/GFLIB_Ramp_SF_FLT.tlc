
%implements GFLIB_Ramp_SF_FLT "C"

%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GFLIB_INCLUDED")
      %assign ::GFLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gflib.h\"" + "\n")>
   %endif 
   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output 
   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

   %assign s32RampUp    = CAST("Real32",Parameter[0].Value[0])
   %assign s32RampDown  = CAST("Real32",Parameter[1].Value[0])

   %assign x = LibBlockInputSignal(0, "", "", 0)
   %assign x1 = LibBlockInputSignal(1, "", "", 0)
   %assign y = LibBlockOutputSignal(0, "", "", 0)
   %assign y1 = LibBlockOutputSignal(1, "", "", 0)
   
   {  
	 static GFLIB_RAMP_T param = { 0, %<s32RampUp>, %<s32RampDown> };
     param.s32State = %<x1>;	 
     %<y> = GFLIB_Ramp (%<x>,&param);
     %<y1> = param.s32State;
   }

%endfunction


%implements GMCLIB_ClarkInv_SF_FLT "C"


%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GMCLIB_INCLUDED")
      %assign ::GMCLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gmclib.h\"" + "\n")>
   %endif 

%endfunction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output 

   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

  %assign alpha = LibBlockInputSignal(0, "", "", 0)
  %assign beta  = LibBlockInputSignal(1, "", "", 0)
  %assign a     = LibBlockOutputSignal(0, "", "", 0)
  %assign b     = LibBlockOutputSignal(1, "", "", 0)
  %assign c     = LibBlockOutputSignal(2, "", "", 0)
  
  {  
    SWLIBS_3Syst Out;
	SWLIBS_2Syst In;
	const SWLIBS_2Syst *const pIn = &In;
	
	In.s32Arg1 = %<alpha>;
	In.s32Arg2 = %<beta>; 
    GMCLIB_ClarkInv (&Out, pIn);
	%<a> = Out.s32Arg1;
	%<b> = Out.s32Arg2;
	%<c> = Out.s32Arg3;
  }

%endfunction

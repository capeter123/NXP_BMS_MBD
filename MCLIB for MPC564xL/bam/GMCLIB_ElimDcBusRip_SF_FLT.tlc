
%implements GMCLIB_ElimDcBusRip_SF_FLT "C"


%% Function: BlockTypeSetup ===================================================
%% Abstract:
%%   Declare external variables and functions
%%
%function BlockTypeSetup(block, system) void

   %if !EXISTS("GMCLIB_INCLUDED")
      %assign ::GMCLIB_INCLUDED = 1
      %<LibCacheIncludes("#include \"gmclib.h\"" + "\n")>
   %endif 

%endfunction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Start Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output 

   
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Outputs Function of S-Function 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output

  %assign s32ModIndex     = CAST("Real32",Parameter[0].Value[0])
  %assign s32ArgDcBusMsr  = CAST("Real32",Parameter[1].Value[0])

  %assign alphaIn  = LibBlockInputSignal(0, "", "", 0)
  %assign betaIn   = LibBlockInputSignal(1, "", "", 0)
  %assign alphaOut = LibBlockOutputSignal(0, "", "", 0)
  %assign betaOut  = LibBlockOutputSignal(1, "", "", 0)
  
  {  
    SWLIBS_2Syst Out;
	SWLIBS_2Syst In;
	const SWLIBS_2Syst *const pIn = &In;
    static const GMCLIB_ELIMDCBUSRIP_T param = { %<s32ModIndex>, %<s32ArgDcBusMsr> };
	static const GMCLIB_ELIMDCBUSRIP_T *const pParam = &param;
	
	In.s32Arg1 = %<alphaIn>;
	In.s32Arg2 = %<betaIn>; 
    GMCLIB_ElimDcBusRip (&Out, pIn, pParam);
	%<alphaOut> = Out.s32Arg1;
	%<betaOut>  = Out.s32Arg2;
  }

%endfunction

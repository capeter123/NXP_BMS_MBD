/*
 *                                RAppID
 *                         Freescale Semiconductor Inc.
 * Target Compiler        : DIAB
 * Target Part            : MPC5643L
*/

MEMORY
{
    word:                           org=0x00000000, len=0x00000008
    vector_table:                   org=0x00002000, len=0x00001000
    int_flash:                      org=0x00003000, len=0x000ED000
    exception_handlers:             org=0x000F0000, len=0x00002000
    int_sram:                       org=0x40000000, len=0x0000F800
    stack_ram:                      org=0x4000F800, len=0x00000800
}

SECTIONS
{
    GROUP : 
    { 
      .rcw  LOAD (0x0): {   }
    } > word

    GROUP : 
    { 
      .exec_vect : {}
      .exec_vect_vle LOAD(0xF0000): 
      {
      *(.exec_vect)
      *(.exec_vect_vle)
      }

    } > exception_handlers


    GROUP : 
    { 
      .ivor4_vector_table LOAD(0x2000): {}
    } > vector_table


    GROUP : 
    { 
      __argv=.;
      __env=.;
      
      .init : {}
      .init_vle : 
      { 
        *(.init)
        *(.init_vle)
      }
      .text : {}
      .text_vle ALIGN(0x08) : 
      { 
        *(.text_vle)
        *(.text)
      }
      .rodata (CONST): 
      { 
        *(.rdata)
        *(.rodata)
      }
      .ctors  ALIGN (0x4): { *(.ctors) }
      .dtors  ALIGN (0x4): { *(.dtors) }
       extab : {}
       extabindex : {}
      .sdata2 : {  }
      .sbss2 : {  }
    } > int_flash

    GROUP : 
    { 
      __DATA_ROM = ADDR(.sbss2) + SIZEOF(.sbss2);
      __DATA_ROM_ADDR = __DATA_ROM;
      __DATA_SRAM_ADDR =.;

__DATA_RAM=.;
        .data  LOAD (__DATA_ROM): { *(.data)  }
        .sdata  LOAD (ADDR(.sdata) - ADDR(.data) + __DATA_ROM): { *(.sdata)  }
__DATA_END=.;

__BSS_START=.;
      .sbss : { *(.sbss) }
      .bss : { *(.bss) }
      .tibss : {}
        
__BSS_END=.;

      .tidata : {}
      
      __HEAP_START =.;
    } > int_sram

}

/* Variable required for Startup, Interrupts, etc */

__DATA_SIZE       = __DATA_END - __DATA_SRAM_ADDR;
__SP_INIT         = ADDR(stack_ram) + SIZEOF(stack_ram);
__SP_END          = ADDR(stack_ram);
_SRAM_BASE_ADDR   = ADDR(int_sram);
_SRAM_SIZE        = SIZEOF(int_sram) + SIZEOF(stack_ram);
__SDATA_SIZE      = 0;
__SDATA_ROM_ADDR  = __DATA_ROM_ADDR;
__SDATA_SRAM_ADDR = __DATA_SRAM_ADDR;
__BSSDATA_SIZE    = (__BSS_END)-(__BSS_START);

__IVPR_VALUE = ADDR(exception_handlers);

